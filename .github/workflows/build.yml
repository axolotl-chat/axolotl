name: Axolotl build pipeline

on:
  workflow_call:
  workflow_dispatch:

env:
  NODE_VERSION: "18.x"

jobs:
  build-axolotl-web:
    name: Build axolotl-web
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check out code
        uses: actions/checkout@v4

      - name: Download dependencies
        run: make download-dependencies-axolotl-web

      - name: Build
        run: make build-axolotl-web

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: axolotl-web
          path: axolotl-web/dist/
          retention-days: 1

  build-axolotl:
    name: Build axolotl
    runs-on: ubuntu-latest
    needs:
      - build-axolotl-web
    steps:
      - name: Install tauri dependencies
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends libgtk-3-dev libwebkit2gtk-4.1-dev librsvg2-dev libayatana-appindicator3-dev libssl-dev libjavascriptcoregtk-4.1-dev

      - name: Install protoc
        run: sudo apt-get install protobuf-compiler

      - name: Rust setup
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Check out code
        uses: actions/checkout@v4

      - name: Download axolotl-web build artifacts
        uses: actions/download-artifact@v4
        id: download
        with:
          name: axolotl-web
          path: build-artifacts

      - name: Copy axolotl-web build artifacts
        run: |
          mkdir --parents axolotl-web/dist
          cp -rf ${{steps.download.outputs.download-path}}/* axolotl-web/dist

      - name: Build
        run: make build-axolotl

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-axolotl-linux-amd64
          path: target/release/axolotl
          retention-days: 1

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: yarn --cwd ./axolotl-web install --frozen-lockfile

      - name: Install and cache tauri-cli
        uses: baptiste0928/cargo-install@v3
        with:
          crate: tauri-cli
          version: '^2.0.0-rc'

      - name: Build deb package
        run: cargo tauri build --ci --features tauri --bundles deb

      - name: Upload deb package
        uses: actions/upload-artifact@v4
        with:
          name: build-axolotl-linux-amd64-deb
          path: target/release/bundle/deb/*.deb
          retention-days: 1

      - name: Build appimage package
        run: cargo tauri build --ci --features tauri --bundles appimage

      - name: Upload appimage package
        uses: actions/upload-artifact@v4
        with:
          name: build-axolotl-linux-amd64-appimage
          path: target/release/bundle/appimage/*.AppImage
          retention-days: 1

  smoketest:
    name: Smoke test
    runs-on: ubuntu-latest
    needs:
      - build-axolotl
    steps:
      - name: Install tauri dependencies
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends libwebkit2gtk-4.1-0
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        id: download-axolotl-linux-amd64
        with:
          name: build-axolotl-linux-amd64
      - name: Run axolotl binary
        run: |
          AXOLOTL="${{steps.download-axolotl-linux-amd64.outputs.download-path}}/axolotl"
          chmod +x ${AXOLOTL}
          ${AXOLOTL} --help

  build-axolotl-arm64:
    name: Build axolotl arm64
    runs-on: ubuntu-latest
    needs:
      - build-axolotl-web
    steps:
      - name: Install tools
        run: |
          sudo apt-get update && sudo apt-get install -y ca-certificates curl

      - name: Install protoc
        run: sudo apt-get install protobuf-compiler

      - name: Read host info
        run: |
          source /etc/os-release
          echo "Running on ${NAME} ${VERSION}"
          echo "HOST_CODENAME=${VERSION_CODENAME}" >> $GITHUB_ENV

          source <(dpkg-architecture --list)
          echo "HOST_ARCH=${DEB_HOST_ARCH}" >> $GITHUB_ENV

      - name: Install tauri arm64 dependencies
        run: |
          # Restrict host sources to host architecture
          sudo sed -i "/^Signed-By:/a Architectures: ${HOST_ARCH}" /etc/apt/sources.list.d/ubuntu.sources

          # Add arm64 archives
          sudo dpkg --add-architecture arm64
          echo "Types: deb" | sudo tee -a /etc/apt/sources.list.d/ubuntu-arm64.sources
          echo "URIs: http://ports.ubuntu.com/" | sudo tee -a /etc/apt/sources.list.d/ubuntu-arm64.sources
          echo "Suites: ${HOST_CODENAME} ${HOST_CODENAME}-security ${HOST_CODENAME}-backports ${HOST_CODENAME}-updates" | sudo tee -a /etc/apt/sources.list.d/ubuntu-arm64.sources
          echo "Components: main universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ubuntu-arm64.sources
          echo "Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg" | sudo tee -a /etc/apt/sources.list.d/ubuntu-arm64.sources
          echo "Architectures: arm64" | sudo tee -a /etc/apt/sources.list.d/ubuntu-arm64.sources

          # Install packages
          sudo apt-get update && sudo apt-get install -y --no-install-recommends libgtk-3-dev:arm64 libwebkit2gtk-4.1-dev:arm64 librsvg2-dev:arm64 libayatana-appindicator3-dev:arm64 libssl-dev:arm64 libjavascriptcoregtk-4.1-dev:arm64

      - name: Rust setup
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: aarch64-unknown-linux-gnu

      - name: Setup C compiler, linker and pkgconfig
        run: |
          sudo apt-get install -y g++ g++-aarch64-linux-gnu

          echo "HOST_CC=gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=/" >> $GITHUB_ENV

      - name: Check out code
        uses: actions/checkout@v4

      - name: Download build-axolotl-web build artifacts
        uses: actions/download-artifact@v4
        id: download-axolotl-web
        with:
          name: axolotl-web
          path: build-artifacts

      - name: Copy axolotl-web build artifacts
        run: |
          mkdir --parents axolotl-web/dist
          cp -rf ${{steps.download-axolotl-web.outputs.download-path}}/* axolotl-web/dist

      - name: Build
        run: cargo build --target aarch64-unknown-linux-gnu --release --features tauri

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-axolotl-linux-arm64
          path: target/aarch64-unknown-linux-gnu/release/axolotl
          retention-days: 1

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: yarn --cwd ./axolotl-web install --frozen-lockfile

      - name: Install and cache tauri-cli
        uses: baptiste0928/cargo-install@v3
        with:
          crate: tauri-cli

      - name: Build deb package
        run: cargo tauri build --ci --target aarch64-unknown-linux-gnu --features tauri --bundles deb

      - name: Upload deb package
        uses: actions/upload-artifact@v4
        with:
          name: build-axolotl-linux-arm64-deb
          path: target/aarch64-unknown-linux-gnu/release/bundle/deb/*.deb
          retention-days: 1

  package-click:
    strategy:
      matrix:
        arch: [armhf, arm64, amd64]
    name: Package as click ${{ matrix.arch }}
    runs-on: ubuntu-latest
    needs:
      - build-axolotl-web
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download axolotl-web build artifacts
        uses: actions/download-artifact@v4
        id: download-axolotl-web
        with:
          name: axolotl-web
          path: build-artifacts

      - name: Put axolotl web in place
        run: |
          mkdir -p $GITHUB_WORKSPACE/build/all/axolotlweb/install/axolotl-web/dist
          cp -rf ${{steps.download-axolotl-web.outputs.download-path}}/* $GITHUB_WORKSPACE/build/all/axolotlweb/install/axolotl-web/dist
          # workaround for https://gitlab.com/clickable/clickable/-/issues/422
          mkdir -p $GITHUB_WORKSPACE/build/{arm-linux-gnueabihf,aarch64-linux-gnu,x86_64-linux-gnu}/
          ln -s ../all/axolotlweb $GITHUB_WORKSPACE/build/arm-linux-gnueabihf/axolotlweb
          ln -s ../all/axolotlweb $GITHUB_WORKSPACE/build/aarch64-linux-gnu/axolotlweb
          ln -s ../all/axolotlweb $GITHUB_WORKSPACE/build/x86_64-linux-gnu/axolotlweb

      - name: Build click (${{ matrix.arch }})
        # workaround https://github.com/actions/runner/issues/1479#issuecomment-969306629
        uses: ChristopherHX/conditional@01004426dfbc58dc9bfe0713f146f1429eb5025e # main
        with:
          step: |
            uses: docker://clickable/ci-20.04-${{ matrix.arch }}:8.2.0
            with:
              args: clickable build --verbose -a ${{ matrix.arch }}

      - name: Upload the built click artifact (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: build-axolotl-linux-${{ matrix.arch }}-click
          path: build/*/app/axolotl.nanuc_*.click
          retention-days: 1

  # See https://github.com/flatpak/flatpak-github-actionsfor examples
  # It also contains instructions on how to compile for other architectures via QEMU
  flatpak:
    name: Flatpak
    strategy:
      matrix:
        variant:
          - arch: x86_64
            runner: ubuntu-latest
          - arch: aarch64
            # TODO use ubuntu-latest-arm tag once available
            runner: ubuntu-24.04-arm
      # Don't fail the whole workflow if one architecture fails
      fail-fast: false
    runs-on: ${{ matrix.variant.runner }}
    container:
      image: ghcr.io/flathub-infra/flatpak-github-actions:gnome-46
      options: --privileged
    steps:
      - uses: actions/checkout@v4
      - id: flatpak-branch
        # Flatpak branch musn't contain "/" but dependabot branches do
        run: echo "branch=$(echo ${{ github.head_ref || github.ref_name }} | sed 's$/$_$g')" >> $GITHUB_OUTPUT
      - uses: flathub-infra/flatpak-github-actions/flatpak-builder@master
        with:
          bundle: axolotl.flatpak
          manifest-path: flatpak/org.nanuc.Axolotl.yml
          branch: ${{ steps.flatpak-branch.outputs.branch }}
          arch: ${{ matrix.variant.arch }}
          build-bundle: true
          upload-artifact: true
