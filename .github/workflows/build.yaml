name: Axolotl build pipeline

on:
  workflow_call:

env:
  NODE_VERSION: "18.x"

jobs:
  build-axolotl-web:
    name: Build axolotl-web
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check out code
        uses: actions/checkout@v3

      - name: Download dependencies
        run: npm --prefix ./axolotl-web ci --loglevel verbose

      - name: Run tests
        run: npm --prefix ./axolotl-web test

      - name: Lint application
        run: npm --prefix ./axolotl-web run lint

      - name: Analyze npm dependencies
        run: npm --prefix ./axolotl-web run depcheck

      - name: Build
        run: npm --prefix ./axolotl-web run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: axolotl-web
          path: axolotl-web/dist/
          retention-days: 1

  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt

      - name: Check code format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

  clippy:
    name: clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: install protoc
        run: sudo apt-get install protobuf-compiler

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy

      - name: Setup CI cache
        uses: Swatinem/rust-cache@v2

      - name: Run clippy lints
        uses: actions-rs/cargo@v1
        with:
          command: clippy

  build-axolotl:
    name: Build axolotl
    runs-on: ubuntu-latest
    needs:
      - build-axolotl-web
    steps:
      - name: Install tauri dependencies
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends cmake libgtk-3-dev libwebkit2gtk-4.1-dev librsvg2-dev libayatana-appindicator3-dev libssl-dev libjavascriptcoregtk-4.1-dev

      - name: Install protoc
        run: sudo apt-get install protobuf-compiler

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: Check out code
        uses: actions/checkout@v3

      - name: Download axolotl-web build artifacts
        uses: actions/download-artifact@v3
        id: download
        with:
          name: axolotl-web
          path: build-artifacts

      - name: Copy axolotl-web build artifacts
        run: |
          mkdir --parents axolotl-web/dist
          cp -rf ${{steps.download.outputs.download-path}}/* axolotl-web/dist

      - name: Build
        run: |
          cargo build --release --features tauri

      - name: Install tauri-cli
        run: cargo install tauri-cli
      
      - name: Install vite
        run: npm install -g vite
      
      - name: Download dependencies
        run: npm --prefix ./axolotl-web ci --loglevel verbose

      - name: Build deb package
        run: cargo tauri build -b deb --features tauri
        
      - name: Build appimage package
        run: cargo tauri build -b appimage --features tauri

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-axolotl-linux-amd64
          path: target/release/axolotl
          retention-days: 1
      - name: Upload deb package
        uses: actions/upload-artifact@v3
        with:
          name: build-axolotl-linux-amd64-deb
          path: target/release/bundle/deb/*.deb
          retention-days: 1
      - name: Upload appimage package
        uses: actions/upload-artifact@v3
        with:
          name: build-axolotl-linux-amd64-appimage
          path: target/release/bundle/appimage/*.AppImage
          retention-days: 1

  build-axolotl-arm64:
    name: Build axolotl arm64
    runs-on: ubuntu-latest
    needs:
      - build-axolotl-web
    steps:
      - name: Install tools
        run: |
          sudo apt-get update && sudo apt-get install -y ca-certificates curl

      - name: Install tauri arm64 dependencies
        run: |
          sudo dpkg --add-architecture arm64
          sudo sed -i '/^deb \[/! s/^deb /deb [arch=amd64] /' /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy main multiverse universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy-security main multiverse universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy-backports main multiverse universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy-updates main multiverse universe" | sudo tee -a /etc/apt/sources.list

          sudo apt-get update && sudo apt-get install -y --no-install-recommends cmake libgtk-3-dev:arm64 libwebkit2gtk-4.1-dev:arm64 librsvg2-dev:arm64 libayatana-appindicator3-dev:arm64 libssl-dev:arm64 libjavascriptcoregtk-4.1-dev:arm64

      - name: Install protoc
        run: sudo apt-get install protobuf-compiler

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: aarch64-unknown-linux-gnu

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: Setup C compiler, linker and pkgconfig
        run: |
          sudo apt-get install -y g++ g++-aarch64-linux-gnu

          echo "HOST_CC=gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=/" >> $GITHUB_ENV

      - name: Check out code
        uses: actions/checkout@v3

      - name: Download build-axolotl-web build artifacts
        uses: actions/download-artifact@v3
        id: download-axolotl-web
        with:
          name: axolotl-web
          path: build-artifacts

      - name: Copy axolotl-web build artifacts
        run: |
          mkdir --parents axolotl-web/dist
          cp -rf ${{steps.download-axolotl-web.outputs.download-path}}/* axolotl-web/dist

      - name: Build
        run: cargo build --release --target aarch64-unknown-linux-gnu --features tauri

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-axolotl-linux-arm64
          path: target/aarch64-unknown-linux-gnu/release/axolotl
          retention-days: 1

  package-deb-arm64:
    name: Package as Debian arm64
    runs-on: ubuntu-latest
    needs:
      - build-axolotl-arm64
    steps:
      - name: Install tools
        run: |
          sudo apt-get update && sudo apt-get install -y ca-certificates curl debmake

      - name: Install tauri arm64 dependencies
        run: |
          sudo dpkg --add-architecture arm64
          sudo sed -i '/^deb \[/! s/^deb /deb [arch=amd64] /' /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy main multiverse universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy-security main multiverse universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy-backports main multiverse universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy-updates main multiverse universe" | sudo tee -a /etc/apt/sources.list

          sudo apt-get update && sudo apt-get install -y --no-install-recommends cmake libgtk-3-dev:arm64 libwebkit2gtk-4.1-dev:arm64 librsvg2-dev:arm64 libayatana-appindicator3-dev:arm64 libssl-dev:arm64 libjavascriptcoregtk-4.1-dev:arm64

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: aarch64-unknown-linux-gnu

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: Setup C compiler, linker and pkgconfig
        run: |
          sudo apt-get install -y g++ g++-aarch64-linux-gnu

          echo "HOST_CC=gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=/" >> $GITHUB_ENV

      - name: Check out code
        uses: actions/checkout@v3

      - name: Download build artifacts arm64
        uses: actions/download-artifact@v3
        with:
          name: build-axolotl-linux-arm64
          path: target/aarch64-unknown-linux-gnu/release/axolotl

      - name: Install cargo-deb
        run: cargo install cargo-deb --no-default-features

      - name: Get git tag version
        run: |
          git fetch --all --tags
          echo "TAG=$(git tag | tail --lines=1)" >> $GITHUB_ENV

      - name: Set release version
        run: |
          echo "RELEASE_VERSION=$(echo ${{ env.TAG }} | sed 's/v//')" >> $GITHUB_ENV

      - name: Prebuild package Debian arm64
        run: |
          wget https://github.com/nanu-c/axolotl/archive/v${{ env.RELEASE_VERSION }}.tar.gz --output-document=$GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}.tar.gz
          mkdir --parents $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/axolotl
          cp --recursive $GITHUB_WORKSPACE/target/aarch64-unknown-linux-gnu/release/axolotl/* $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/axolotl/
          cp $GITHUB_WORKSPACE/deb/LICENSE $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/LICENSE
          cd $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }} && debmake --yes --email arno_nuehm@riseup.net --fullname "Arno Nuehm" --monoarch
          sed -i '3d;4d' $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/debian/changelog
          awk -i inplace 'NR == 3 {print "  * See upstream changelog below."} {print}' $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/debian/changelog
          echo >> $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/debian/changelog
          cat $GITHUB_WORKSPACE/docs/CHANGELOG.md >> $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/debian/changelog
          sed -i 's/<preferred name and address to reach the upstream project>/Aaron <aaron@nanu-c.org>/' $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/debian/copyright
          sed -i 's/<url:\/\/example.com>/https:\/\/github.com\/nanu-c\/axolotl/' $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/debian/copyright
          cp $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/debian/changelog $GITHUB_WORKSPACE/deb/
          cp $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/debian/copyright $GITHUB_WORKSPACE/deb/

      - name: Build package Debian arm64
        run: cargo deb --target=aarch64-unknown-linux-gnu --no-build

      - name: Upload package artifact Debian arm64
        uses: actions/upload-artifact@v3
        with:
          name: Axolotl-Debian-arm64-package
          path: target/aarch64-unknown-linux-gnu/debian/axolotl_*_arm64.deb
          retention-days: 1

  package-click:
    strategy:
      matrix:
        arch: [armhf, arm64, amd64]
    name: Package as click ${{ matrix.arch }}
    runs-on: ubuntu-latest
    needs:
      - build-axolotl-web
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Download axolotl-web build artifacts
        uses: actions/download-artifact@v3
        id: download-axolotl-web
        with:
          name: axolotl-web
          path: build-artifacts

      - name: Put axolotl web in place
        run: |
          mkdir -p $GITHUB_WORKSPACE/build/all/axolotlweb/install/axolotl-web/dist
          cp -rf ${{steps.download-axolotl-web.outputs.download-path}}/* $GITHUB_WORKSPACE/build/all/axolotlweb/install/axolotl-web/dist
          # workaround for https://gitlab.com/clickable/clickable/-/issues/422
          mkdir -p $GITHUB_WORKSPACE/build/{arm-linux-gnueabihf,aarch64-linux-gnu,x86_64-linux-gnu}/
          ln -s ../all/axolotlweb $GITHUB_WORKSPACE/build/arm-linux-gnueabihf/axolotlweb
          ln -s ../all/axolotlweb $GITHUB_WORKSPACE/build/aarch64-linux-gnu/axolotlweb
          ln -s ../all/axolotlweb $GITHUB_WORKSPACE/build/x86_64-linux-gnu/axolotlweb

      - name: Build click (${{ matrix.arch }})
        # workaround https://github.com/actions/runner/issues/1479#issuecomment-969306629
        uses: ChristopherHX/conditional@b4a9649204f81002ec9a4ef7d4bf7d6b2ab7fa55
        with:
          step: |
            uses: docker://clickable/ci-20.04-${{ matrix.arch }}:8.0.1
            with:
              args: clickable build --verbose -a ${{ matrix.arch }}

      - name: Upload the built click artifact (${{ matrix.arch }})
        uses: actions/upload-artifact@v3
        with:
          name: Axolotl-Clickable
          path: build/*/app/axolotl.nanuc_*.click
          retention-days: 1

  # See https://github.com/flatpak/flatpak-github-actionsfor examples
  flatpak:
    name: Flatpak
    runs-on: ubuntu-latest
    container:
      image: bilelmoussaoui/flatpak-github-actions:gnome-45
      options: --privileged
    strategy:
      matrix:
        arch: [x86_64, aarch64]
      # Don't fail the whole workflow if one architecture fails
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      # Docker is required by the docker/setup-qemu-action which enables emulation
      - name: Install deps
        if: ${{ matrix.arch != 'x86_64' }}
        run: |
          dnf -y install docker
      - name: Set up QEMU
        if: ${{ matrix.arch != 'x86_64' }}
        id: qemu
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - uses: flatpak/flatpak-github-actions/flatpak-builder@v6
        with:
          bundle: axolotl.flatpak
          manifest-path: flatpak/org.nanuc.Axolotl.yml
          branch: ${{ github.head_ref || github.ref_name }} 
          arch: ${{ matrix.arch }}
          build-bundle: true
          upload-artifact: true
