name: Axolotl build pipeline

on:
  workflow_call:

env:
  GO_VERSION: 1.16
  NODE_VERSION: "18.x"

jobs:
  build-axolotl:
    name: Build axolotl
    runs-on: ubuntu-latest

    steps:
      - name: Setup Go 1.16
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Check out code
        uses: actions/checkout@v3

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: make check-axolotl

      - name: Build
        run: make build-axolotl

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: axolotl
          path: axolotl
          retention-days: 1

  build-axolotl-web:
    name: Build axolotl-web
    runs-on: ubuntu-latest

    steps:
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check out code
        uses: actions/checkout@v3

      - name: Download dependencies
        run: npm --prefix ./axolotl-web ci --loglevel verbose

      - name: Run tests
        run: npm --prefix ./axolotl-web test

      - name: Lint application
        run: npm --prefix ./axolotl-web run lint

      - name: Analyze npm dependencies
        run: npm --prefix ./axolotl-web run depcheck

      - name: Build
        run: npm --prefix ./axolotl-web run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: axolotl-web
          path: axolotl-web/dist/
          retention-days: 1

  build-crayfish:
    name: Build crayfish
    runs-on: ubuntu-latest

    steps:
      - name: Setup rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Check out code
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path crayfish/Cargo.toml --release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: crayfish
          path: crayfish/target/release/crayfish
          retention-days: 1

  build-axolotl-deb-arm64:
    name: Build axolotl Debian arm64
    runs-on: ubuntu-latest

    steps:
      - name: Set up Go 1.16
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up cross-compiling environment
        run: |
          sudo apt update
          sudo apt install -y gcc-aarch64-linux-gnu

      - name: Check out code
        uses: actions/checkout@v3

      - name: Download dependencies
        run: go mod download

      - name: Build
        run: env GOOS=linux GOARCH=arm64 CGO_ENABLED=1 CC=aarch64-linux-gnu-gcc PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig go build -o build/linux-arm64/axolotl .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux-arm64
          path: build/linux-arm64/axolotl
          retention-days: 1

  build-axolotl-web-deb-arm64:
    name: Build axolotl-web Debian arm64
    runs-on: ubuntu-latest

    steps:
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check out code
        uses: actions/checkout@v3

      - name: Create folder
        run: mkdir --parents $GITHUB_WORKSPACE/build/linux-arm64/axolotl-web

      - name: Download dependencies
        run: npm --prefix ./axolotl-web --target_arch=arm64 ci --loglevel verbose

      - name: Build
        run: npm --prefix ./axolotl-web --target_arch=arm64 run build

      - name: Copy build files
        run: |
          cp --recursive $GITHUB_WORKSPACE/axolotl-web/dist $GITHUB_WORKSPACE/build/linux-arm64/axolotl-web/
          cp --recursive $GITHUB_WORKSPACE/guis $GITHUB_WORKSPACE/build/linux-arm64/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux-arm64
          path: build/linux-arm64/
          retention-days: 1

  build-crayfish-deb-arm64:
    name: Build crayfish Debian arm64
    runs-on: ubuntu-latest

    steps:
      - name: Install linker
        run: |
          sudo apt update
          sudo apt install -y gcc-aarch64-linux-gnu

      - name: Configure Rust & Cross
        run: |
          rustup update
          rustup target add aarch64-unknown-linux-gnu
          cargo install cross

      - name: Check out code
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Build
        run: cd crayfish && cross build --release --target aarch64-unknown-linux-gnu

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: crayfish-arm64
          path: crayfish/target/aarch64-unknown-linux-gnu/release/crayfish
          retention-days: 1
